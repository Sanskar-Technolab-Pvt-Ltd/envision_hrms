[
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Save",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2024-10-14 18:47:47.744926",
  "module": "Envision HRMS",
  "name": "Set checkin date",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Employee Checkin",
  "script": "# formatted_time = frappe.utils.formatdate(doc.time, \"yyyy-mm-dd\") + doc.time[10:]\n# date_time = frappe.utils.get_datetime(formatted_time)\n# doc.custom_date = date_time.date()\n\ndate_time = frappe.utils.get_datetime(doc.time)\ndoc.custom_date = date_time.date()",
  "script_type": "DocType Event"
 },
 {
  "allow_guest": 0,
  "api_method": null,
  "cron_format": null,
  "disabled": 0,
  "docstatus": 0,
  "doctype": "Server Script",
  "doctype_event": "Before Insert",
  "enable_rate_limit": 0,
  "event_frequency": "All",
  "modified": "2025-04-02 10:11:27.767042",
  "module": "Envision HRMS",
  "name": "Employee Checkin Set Type IN OUT",
  "rate_limit_count": 5,
  "rate_limit_seconds": 86400,
  "reference_doctype": "Employee Checkin",
  "script": " # Extract the date part from the datetime field\ncheckin_date = frappe.utils.getdate(doc.time)  # Returns a date object\n\n# Convert date to string to form a proper datetime range filter\nstart_datetime = str(checkin_date) + \" 00:00:00\"\nend_datetime = str(checkin_date) + \" 23:59:59\"\n\n# Fetch all check-ins for the employee on the same date, sorted by time\nexisting_checkins = frappe.get_all(\n    \"Employee Checkin\",\n    filters={\n        \"employee\": doc.employee,\n        \"time\": [\"between\", [start_datetime, end_datetime]]\n    },\n    fields=[\"name\", \"time\", \"log_type\"],\n    order_by=\"time asc\"\n)\n\n# If it's the first check-in for the day, set as \"IN\", otherwise \"OUT\"\nif len(existing_checkins) == 0:\n    doc.log_type = \"IN\"\nelse:\n    doc.log_type = \"OUT\"\n",
  "script_type": "DocType Event"
 }
]